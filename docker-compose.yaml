services:

  api-db:
    image: postgres
    volumes:
      - api_postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER_API}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_API}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE_API}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "postgres" ]
      interval: 10s
      timeout: 3s
      retries: 3

  rabbitmq:
    image: rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 3s
      retries: 3

  redis:
    image: redis
    environment:
      - REDIS_USER=${REDIS_USER}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 3

  api-service:
    build:
      context: .
      dockerfile: ./ResumeGenerator.ApiService/ResumeGenerator.ApiService.Web/Dockerfile
    restart: on-failure
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      RabbitMq__Host: ${RabbitMq__Host}
      RabbitMq__VirtualHost: ${RabbitMq__VirtualHost}
      RabbitMq__Username: ${RabbitMq__Username}
      RabbitMq__Password: ${RabbitMq__Password}
      ConnectionStrings__DefaultConnection: ${ConnectionStrings__DefaultConnection__Api}
      Redis__Configuration: ${Redis__Configuration}
      Redis__InstanceName: ${Redis__InstanceName}
      TelegramAdapter__Url: "http://telegram-adapter:8081"
      AuthService__Url: "http://auth-service:8081"
    depends_on:
      api-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      telegram-adapter:
        condition: service_started

  minio:
    image: minio/minio
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    command: "server --address 0.0.0.0:9000 --console-address 0.0.0.0:9001 /data"
    volumes:
      - minio_data:/data

  generator-service:
    build:
      context: .
      dockerfile: ./ResumeGenerator.GeneratorService/ResumeGenerator.GeneratorService.Worker/Dockerfile
    restart: on-failure
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ResumeTemplates__PdfTemplateName: ${ResumeTemplates__PdfTemplateName} 
      ResumeTemplates__PdfStyleName: ${ResumeTemplates__PdfStyleName}
      RabbitMq__Host: ${RabbitMq__Host}
      RabbitMq__VirtualHost: ${RabbitMq__VirtualHost}
      RabbitMq__Username: ${RabbitMq__Username}
      RabbitMq__Password: ${RabbitMq__Password}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      TELEGRAM_GRPC_ENDPOINT: "http://telegram-adapter:8081"
      API_GRPC_ENDPOINT: "http://api-service:8081"
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_started
      telegram-adapter:
        condition: service_started
      api-service:
        condition: service_started

  auth-db:
    image: postgres
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER_AUTH}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_AUTH}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE_AUTH}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "postgres" ]
      interval: 10s
      timeout: 3s
      retries: 3

  auth-service:
    build:
      context: .
      dockerfile: ./ResumeGenerator.AuthService/ResumeGenerator.AuthService.Web/Dockerfile
    restart: on-failure
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ConnectionStrings__DefaultConnection: ${ConnectionStrings__DefaultConnection__Auth}
      Jwt__Key: ${Jwt__Key}
      Jwt__Issuer: ${Jwt__Issuer}
      Jwt__Audience: ${Jwt__Audience}
      Jwt__TokenLifetime: ${Jwt__TokenLifetime}
      TelegramBot__Username: ${TelegramBot__Username}
    depends_on:
      auth-db:
        condition: service_healthy

  telegram-adapter-db:
    image: postgres
    volumes:
      - telegram_adapter_postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER_TG}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_TG}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE_TG}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "postgres" ]
      interval: 10s
      timeout: 3s
      retries: 3

  telegram-adapter:
    build:
      context: .
      dockerfile: ./ResumeGenerator.TelegramAdapter/ResumeGenerator.TelegramAdapter.Api/Dockerfile
    restart: on-failure
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      Telegram__BotToken: ${Telegram__BotToken}
      Telegram__Webhook: ${Telegram__Webhook}
      ConnectionStrings__DefaultConnection: ${ConnectionStrings__DefaultConnection__TelegramAdapter}
      Minio__Endpoint: ${MINIO_ENDPOINT}
      Minio__AccessKey: ${MINIO_ACCESS_KEY}
      Minio__SecretKey: ${MINIO_SECRET_KEY}
      AuthService__Url: "http://auth-service:8081"
    depends_on:
      telegram-adapter-db:
        condition: service_healthy
      auth-service:
        condition: service_started

  nginx:
    image: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./certificates:~/certificates
    ports:
      - "8443:443"

volumes:
  api_postgres_data:
  auth_postgres_data:
  telegram_adapter_postgres_data:
  redis_data:
  minio_data:
